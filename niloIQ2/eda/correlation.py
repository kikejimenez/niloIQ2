# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/02_national/02_EDA/03_Correlations.ipynb.

# %% auto 0
__all__ = ['pearson_correlation_matrix', 'correlation_matrix', 'plot', 'gen_top_five']

# %% ../../nbs/02_national/02_EDA/03_Correlations.ipynb 2
from typing import Tuple
from pathlib import Path
import pandas as pd
import phik
import plotly.graph_objects as go
from IPython.display import display, Markdown

from national.util import constants

# %% ../../nbs/02_national/02_EDA/03_Correlations.ipynb 3
def pearson_correlation_matrix(data: pd.DataFrame,) -> pd.DataFrame:
    """Given a dataframe it computes the pearson correlation matrix values.
    It get rid off null values
    
    :params data: A pandas dataframe with date information
    :return: A pandas dataframe with the correlation values
    """
    correlation_matrix = data.corr()
    rows_with_nan_vals = [
        index for index, row in correlation_matrix.iterrows()
        if row.isnull().all()
    ]
    correlation_matrix = correlation_matrix.dropna(how='all')
    correlation_matrix.drop(columns=rows_with_nan_vals, inplace=True)

    return correlation_matrix

# %% ../../nbs/02_national/02_EDA/03_Correlations.ipynb 4
def correlation_matrix(
    df: pd.DataFrame,
    correlation: str = 'pearson',
    exclude: list = None,
    kpi: str = 'Sales',
) -> Tuple[str, pd.DataFrame]:
    cols = [x for x in df.columns if x not in exclude]
    data = df[cols]

    if correlation == 'pearson':
        name = 'Pearson Correlation'
        matrix = pearson_correlation_matrix(data)
    elif correlation == 'phi_k':
        name = 'Phi(k) Correlation'
        matrix = data.phik_matrix(verbose=False,)
    else:
        raise Exception(f"Correlation method {correlation} not implemented")
    return name, matrix

# %% ../../nbs/02_national/02_EDA/03_Correlations.ipynb 5
def plot(**args) -> go.Figure:
    """ 
    Given a correlation object, it gives a heatmap plot for the correlation

    :param correlation: A Correlation instance for the coefficients {spearman,
                        pearson, kendall, cramers, phi_k}
    :return: A graphic object Figure of type heatmap for the correlation
    
    """
    name, matrix = correlation_matrix(**args)

    coefficients = matrix.values
    variables = matrix.columns.tolist()

    fig = go.Figure(
        go.Heatmap(z=coefficients,
                   x=variables,
                   y=variables,
                   type='heatmap',
                   #colorscale='Blues'
                   colorscale='Cividis_r',
                   #colorscale='sepal_length'
                   ))

    fig.update_layout(
        yaxis=dict(autorange='reversed'),
        xaxis=go.layout.XAxis(tickangle=45),
        title=name,
        height=400,
        width=800,
        template = constants.PLOTLY_THEME,
    )

    return fig

# %% ../../nbs/02_national/02_EDA/03_Correlations.ipynb 6
def gen_top_five(
    df: pd.DataFrame,
    kpi: str = "Sales",
) -> str:

    _, cm = correlation_matrix(
        df=df,
        correlation='phi_k',
        exclude=['Date', 'Store'],
    )

    five_largest = cm[kpi].nlargest(6)[1:]
    five_smallest = cm[kpi].nsmallest(6)[1:]

    top_five = pd.DataFrame({
        "Largest Correlations": five_largest.index,
        "Values (Ascendant)": five_largest.values,
        "Smallest Correlations": five_smallest.index,
        "Values (Descendant)": five_smallest.values,
    })

    markdown_str = f"""
    
***Top 5 Correlations with {kpi}*** \n\n
""" + top_five.to_markdown(
        index=False,
        tablefmt="github",
    )

    return display(Markdown(markdown_str))
