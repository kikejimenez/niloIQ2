# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/02_national/05_Experiments/99_merlion/05_Infer.ipynb.

# %% auto 0
__all__ = ['Inference']

# %% ../../../nbs/02_national/05_Experiments/99_merlion/05_Infer.ipynb 2
from pathlib import Path
from typing import List
import pandas as pd

from merlion.utils.time_series import TimeSeries


from national.experiments.merlion import model
from national.experiments.merlion import data_splits
from national.experiments.merlion import train
from national.util.constants import ARIMA_MAX_STEPS, SMES_MAX_STEPS

# %% ../../../nbs/02_national/05_Experiments/99_merlion/05_Infer.ipynb 3
def _forecast(
    data: data_splits.Data,
    models: List[model.Model],
):

    if len(data.time_stamps.test) > 0:

        for model in models:

            #if not model.load_model:
            forecast, stderr = model.model.forecast(
                time_stamps=data.time_stamps.test,
                time_series_prev=data.train,
            )

            model.forecast.test = forecast
            model.stderr.test = stderr

    if len(data.time_stamps.val) > 0:

        for model in models:
            #if not model.load_model:

            forecast, stderr = model.model.forecast(
                time_stamps=data.time_stamps.val,
                time_series_prev=data.train,
            )

            model.forecast.val = forecast
            model.stderr.val = stderr


    if len(data.time_stamps.future) > 0:

        for model in models:
            #if not model.load_model:

            forecast, stderr = model.model.forecast(
                time_stamps=data.time_stamps.future,
                time_series_prev=data.train,
            )

            model.forecast.future = forecast
            model.stderr.future = stderr

# %% ../../../nbs/02_national/05_Experiments/99_merlion/05_Infer.ipynb 4
class Inference(train.Train):

    def __init__(
        self,
        kpi: str,
        freq: str,
        df: pd.DataFrame,
        test_frac: float = 0.15,
        val_frac: float = 0.15,
        **kwargs,
    ):
        super().__init__(
            kpi=kpi,
            df=df,
            freq=freq,
            test_frac=test_frac,
            val_frac=val_frac,
            **kwargs,
        )

        self.horizon = [SMES_MAX_STEPS,
                        ARIMA_MAX_STEPS][int(ARIMA_MAX_STEPS < SMES_MAX_STEPS)]

        sub_test_data = self.data.test[:self.horizon]

        self.data.sub_test = sub_test_data

        self.data.time_stamps.val = self.data.val.univariates[
            self.data.val.names[0]].time_stamps

        self.data.time_stamps.test = sub_test_data.univariates[
            sub_test_data.names[0]].time_stamps

        self.data.time_stamps.train = self.data.train.univariates[
            self.data.train.names[0]].time_stamps

        self.data.time_stamps.future = self.data.future.univariates[
            self.data.future.names[0]].time_stamps

        self._models = [
            self.models.prophet,
            self.models.arima,
            self.models.mses,
            # self.models.ensemble,
            # self.models.partial_ensemble,
        ]

        if self.include_selector:
            self._models = self._models + [self.models.selector]

        print('Start forecast')
        _forecast(
            data=self.data,
            models=self._models,
        )

    def save_models(self):
        _model: model.Model
        for _model in self._models:
            _model.model.save(_model.model_path)
