# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/02_national/05_Experiments/99_merlion/00_FuturePeriods.ipynb.

# %% auto 0
__all__ = ['Data']

# %% ../../../nbs/02_national/05_Experiments/99_merlion/00_FuturePeriods.ipynb 2
import pandas as pd


from merlion.utils import TimeSeries


# %% ../../../nbs/02_national/05_Experiments/99_merlion/00_FuturePeriods.ipynb 3
# class TimeStamp:
#     def __init__(self):
#         self.future= None

# %% ../../../nbs/02_national/05_Experiments/99_merlion/00_FuturePeriods.ipynb 4
def _prepare_future_stamps(
    kpi: str,
    start: str,
    periods: int,
    freq: str,
):

    if periods is None:
        return TimeSeries.from_pd(pd.DataFrame({'date': []}))

    dt = pd.date_range(
        start=start,
        periods=periods,
        freq=freq,
        inclusive="neither",
    )
    dt.name = 'date'

    df = pd.DataFrame(index=dt)
    df[kpi] = 0
    
    return TimeSeries.from_pd(df)

# %% ../../../nbs/02_national/05_Experiments/99_merlion/00_FuturePeriods.ipynb 7
class Data:

    def __init__(
        self,
        # futuristic_start: str = "2011-01-31",
    ) -> None:

        self.kpi = None
        self.futuristic_start_date = None
        self.periods = None
        self.freq = None

        self.future = None

    def gen_futuristic_time_stamps(self):
        self.future = _prepare_future_stamps(
            start=self.futuristic_start_date,
            kpi=self.kpi,
            freq=self.freq,
            periods=self.periods,
        )

        # self.time_stamps = TimeStamp
