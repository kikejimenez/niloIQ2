# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/02_national/05_Experiments/99_merlion/07_Results.ipynb.

# %% auto 0
__all__ = ['Results']

# %% ../../../nbs/02_national/05_Experiments/99_merlion/07_Results.ipynb 2
from typing import List
import logging
import sys
from pathlib import Path
import pandas as pd
import plotly.graph_objects as go


from national.experiments.merlion import model
from national.experiments.merlion import data_splits
from national.experiments.merlion.evaluate import Evaluation

from national.util import constants

# %% ../../../nbs/02_national/05_Experiments/99_merlion/07_Results.ipynb 3
logging.disable(sys.maxsize)

# %% ../../../nbs/02_national/05_Experiments/99_merlion/07_Results.ipynb 4
def _confidence_interval(
    pred: pd.Series,
    stderr: pd.Series,
    percentage_interval,
):

    k = constants.PERCENTAGE_CONFIDENCE_INTERVAL[percentage_interval]

    upper_bound = pred + k * stderr
    lower_bound = pred - k * stderr

    return upper_bound, lower_bound

# %% ../../../nbs/02_national/05_Experiments/99_merlion/07_Results.ipynb 5
def _make_fig(
    fig: go.Figure,
    name: str,
    data: pd.Series,
    pred: pd.Series,
    data_color: str,
    pred_color: str,
    percentage_interval: float = 95,
    stderr: pd.Series=None,
) -> None:

    upper_bound, lower_bound = _confidence_interval(
        pred=pred,
        stderr=stderr,
        percentage_interval=percentage_interval,
    )

    #return upper_bound, lower_bound
    # data
    if data is not None:
        fig.add_trace(
            go.Scatter(
                name=f"Data ({name})",
                x=data.index,
                y=data.values,
                marker_color=data_color,
                showlegend=True,
            ),)

    # forecast
    fig.add_trace(
        go.Scatter(
            name=f"Forecast ({name})",
            x=pred.index,
            y=pred.values,
            marker_color=pred_color,
            showlegend=True,
        ),)

    # confidence bands

    fig.add_trace(
        go.Scatter(name='Upper Bound',
                   x=pred.index,
                   y=upper_bound,
                   mode='lines',
                   marker=dict(color="#444"),
                   hoverinfo="skip",
                   line=dict(width=0),
                   showlegend=False))

    fig.add_trace(
        go.Scatter(name='Lower Bound',
                   x=pred.index,
                   y=lower_bound,
                   marker=dict(color="#444"),
                   line=dict(width=0),
                   hoverinfo="skip",
                   mode='lines',
                   fillcolor='rgba(68, 68, 68, 0.3)',
                   fill='tonexty',
                   showlegend=False))

# %% ../../../nbs/02_national/05_Experiments/99_merlion/07_Results.ipynb 6
def _plot(
    data: data_splits.Data,
    model: model.Model,
    kpi: str,
    freq: str,
    start_at: int = 1,
):
    fig = go.Figure()

    _make_fig(
        fig=fig,
        name='Train',
        data=data.train[start_at:].to_pd()[kpi],
        pred=model.forecast.train[start_at:].to_pd()[kpi],
        stderr=model.stderr.train[start_at:].to_pd()[f"{kpi}_err"],
        data_color='cornflowerblue',
        pred_color='crimson',
    )

    if len(data.val) > 1:
        _make_fig(
            fig=fig,
            name='Validation',
            data=data.val.to_pd()[kpi],
            pred=model.forecast.val.to_pd()[kpi],
            stderr=model.stderr.val.to_pd()[f"{kpi}_err"],
            data_color='cornflowerblue',
            pred_color='crimson',
        )

    if len(data.test) > 0:
        _make_fig(
            fig=fig,
            name='Test',
            data=None,
            pred=model.forecast.test.to_pd()[kpi],
            stderr=model.stderr.test.to_pd()[f"{kpi}_err"],
            data_color='cornflowerblue',
            pred_color='crimson',
        )
    if len(data.future) > 0:
        _make_fig(
            fig=fig,
            name='Future Preds.',
            data=None,
            pred=model.forecast.future.to_pd()[kpi],
            stderr=model.stderr.future.to_pd()[f"{kpi}_err"],
            data_color='cornflowerblue',
            pred_color='aquamarine',
        )
    # # divide between test and train
    # fig.add_vline(
    #     x=data.train.tf,
    #     line_color="#ff7b25",
    #     # opacity=0.3,
    #     # layer="below",
    #     line_width=1,
    #     line_dash='dash',
    # )

    # fig.add_vrect(
    #     x0=data.train.tf,
    #     x1=data.val.t0,
    #     fillcolor="LightSalmon",
    #     opacity=0.2,
    #     layer="below",
    #     line_width=0,
    # )

    title_text = f"{freq} Forecast for {kpi} using {model.name} model."

    fig.update_layout(
        height=500,
        autosize=True,
        title_text=title_text,
        showlegend=True,
        template=constants.PLOTLY_THEME,
    )

    return fig

# %% ../../../nbs/02_national/05_Experiments/99_merlion/07_Results.ipynb 7
def _metrics(
    models: List[model.Model],
    is_train: bool = True,
):

    _index = pd.Index([x.name for x in models], name='Model')

    if is_train:
        _evaluations = [model.evaluation.train for model in models]
    else:

        _evaluations = [model.evaluation.val for model in models]

    df = pd.DataFrame(
        {
            'sMAPE': [x.smape() for x in _evaluations],
            'rRSME': [x.rrmse() for x in _evaluations],
            'RMSPE': [x.rmspe() for x in _evaluations],
        },
        index=_index,
    )

    df['Dataset'] = 'Train' if is_train else 'Validation'
    return df.reset_index().set_index(['Dataset', 'Model'])

# %% ../../../nbs/02_national/05_Experiments/99_merlion/07_Results.ipynb 8
class Results(Evaluation):

    def __init__(
        self,
        **args,
    ):
        super().__init__(**args)

        self._list_of_models = [
            self.models.arima,
            self.models.prophet,
             self.models.mses,
            # self.models.partial_ensemble,
        ]




        self.save_models()

    def plot_model(
        self,
        model: model.Model,
    ):

        return _plot(
            data=self.data,
            model=model,
            freq=self.freq,
            kpi=self.kpi,
            start_at=2,
        )

    def metrics(
        self,
        is_train: bool = True,
    ):

        return _metrics(
            models=self._list_of_models,
            is_train=is_train,
        )

    def save_models(self):
        model_dir = '/workspaces/niloIQ/models/merlion'

        _model: model.Model
        for _model in self._list_of_models:
            _model.model_path = Path(model_dir,_model.name)
            _model.model.save(_model.model_path)
    
    def get_futures_dict(self):
        _dict = {}
        for _model in self._list_of_models:
            _future = _model.forecast.future.to_pd().reset_index()
            _future.index = _future['time'].map(lambda x: str(x)[:10])
            _dict[_model.name] =_future[self.kpi].to_dict()
            
        
        return _dict
        
