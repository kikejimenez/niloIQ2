# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/02_national/05_Experiments/09_darts/01_TrainValidationTestSets.ipynb.

# %% auto 0
__all__ = ['threshold_value', 'Data', 'vis_train_test_split', 'plot']

# %% ../../../nbs/02_national/05_Experiments/09_darts/01_TrainValidationTestSets.ipynb 3
from typing import Tuple, Optional
import numpy as np
import pandas as pd
import plotly.graph_objects as go


from national.experiments.darts import preprocessing
from darts import TimeSeries


# from national.data_preprocessing import merge
# from national.time_series.process import time_series as gen_time_series

from national.util import constants

# %% ../../../nbs/02_national/05_Experiments/09_darts/01_TrainValidationTestSets.ipynb 4
def threshold_value(
    ts: TimeSeries,
    train_frac: float,
) -> int:

    return int(len(ts) * train_frac)

# %% ../../../nbs/02_national/05_Experiments/09_darts/01_TrainValidationTestSets.ipynb 5
def _split(
    ts: TimeSeries,
    train_frac: float,
) -> Tuple[TimeSeries, TimeSeries]:

    t_value = threshold_value(ts,train_frac)
    # # Set aside the last 36 months as a validation series

    train = ts[:t_value]
    val = ts[t_value:]

    return train, val

# %% ../../../nbs/02_national/05_Experiments/09_darts/01_TrainValidationTestSets.ipynb 6
def _get_test_set(
    test_path: str,
    freq: str,
) -> TimeSeries:
    test = pd.read_csv(
        test_path,
        parse_dates=['Date'],
    )
    test.index = test['Date']
    test = test.resample(freq).mean()
    
    return TimeSeries.from_dataframe(
        test.reset_index(),
        time_col='Date',
    )

# %% ../../../nbs/02_national/05_Experiments/09_darts/01_TrainValidationTestSets.ipynb 7
class Data(preprocessing.Data):

    def __init__(
        self,
        df: pd.DataFrame,
       train_frac: float =0.8, 
     **kwargs,
    ):
        
        super().__init__(df=df,kwargs=kwargs)

        self.train_frac= train_frac
        
        train, val = _split(
            ts=self.time_series,
            train_frac=train_frac,
        )

        self.train = train
        self.val = val
        self.test = _get_test_set("../../../data/test.csv", self.freq)

     

# %% ../../../nbs/02_national/05_Experiments/09_darts/01_TrainValidationTestSets.ipynb 8
def vis_train_test_split(
    ts: pd.Series,
    val: pd.Series,
    kpi: str,
):
    fig = go.Figure()


    fig.add_trace(
        go.Scatter(
            x=ts.index,
            y=ts.values,
            marker_color='cornflowerblue',
        ),)

    x0 = val.head(1).index[0]
    x1 = val.tail(1).index[0]

    # Add shape regions
    fig.add_vrect(
        x0=x0,
        x1=x1,
        fillcolor="LightSalmon",
        opacity=0.3,
        layer="below",
        line_width=0,
    )

    title_text = f"Train - Validation Split for {kpi}"

    fig.update_layout(
        height=500,
        autosize=True,
        title_text=title_text,
        template=constants.PLOTLY_THEME,
    )

    return fig

# %% ../../../nbs/02_national/05_Experiments/09_darts/01_TrainValidationTestSets.ipynb 9
def plot(data: Data, ):

    ts = data.time_series._xa.to_series().reset_index(level=[1,2])[0]
    val = data.val._xa.to_series().reset_index(level=[1,2])[0]

    fig = vis_train_test_split(
        ts=ts,
        val=val,
        kpi=data.kpi,
    )

    return fig
