# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/02_national/05_Experiments/09_darts/00_Preprocessing.ipynb.

# %% auto 0
__all__ = ['Data']

# %% ../../../nbs/02_national/05_Experiments/09_darts/00_Preprocessing.ipynb 2
import numpy as np 
import pandas as pd
from darts.dataprocessing.transformers import Scaler
from darts import TimeSeries

from national.time_series.process import time_series as gen_time_series
from national.data_preprocessing import date_features

# %% ../../../nbs/02_national/05_Experiments/09_darts/00_Preprocessing.ipynb 3
def _normalize(ts):

    scaler = Scaler()
    return scaler, scaler.fit_transform(ts)

# %% ../../../nbs/02_national/05_Experiments/09_darts/00_Preprocessing.ipynb 4
def _preprocess(
    df: pd.DataFrame,
    *,
    kpi: str,
    freq: str,
    time_col: str,
    normalize: bool,
) -> TimeSeries:
    mask = df[kpi] > 0

    ts = gen_time_series(
        df=df[mask],
        time_column='date',
        freq=freq,
        agg_method={kpi:np.mean, },
    )

    ts.dropna(inplace=True)

    ts = TimeSeries.from_dataframe(
        ts.reset_index(),
        time_col=time_col,
        value_cols=kpi,
    )

    if normalize:
        scaler, ts = _normalize(ts)
        return scaler,ts

    return None,ts

# %% ../../../nbs/02_national/05_Experiments/09_darts/00_Preprocessing.ipynb 5
class Data:


    def __init__(
        self,
        df: pd.DataFrame,
        kwargs: dict = {},
    ):
                
        self.kpi = kwargs['kpi'] if 'kpi' in kwargs.keys() else 'price'
        self.freq = kwargs['freq'] if 'freq' in kwargs.keys() else 'W-MON'
        self.time_col = kwargs['time_col'] if 'time_col' in kwargs.keys() else 'date'
        self.normalize = kwargs['normalize'] if 'normalize' in kwargs.keys() else True

        self.scaler, self.time_series = _preprocess(
            df=df,
            kpi=self.kpi,
            freq=self.freq,
            time_col=self.time_col,
            normalize=self.normalize,
        )
